- hosts: all
  gather_facts: yes
  become: yes
  tasks:

  - name: Print facts
    debug:
      var: hostvars[inventory_hostname]
    tags: 
      - set-vars

  - name: Gather os specific variables
    include_vars: "{{ item }}" 
    with_first_found:
    - "vars/{{ ansible_distribution_release | lower }}.yml"
    - "vars/{{ ansible_distribution_version | lower }}.yml"
    tags: 
      - set-vars

  - name: Gather architecture specific variables
    include_vars: "{{ item }}" 
    with_first_found:
    - "vars/arch/{{ ansible_architecture | lower }}.yml"
    tags: 
      - set-vars

  - name: Update all packages to the latest version
    apt:
      state: latest
      update_cache: yes
    tags:
      - install-update

  - name: Install base packages
    ansible.builtin.apt:
      pkg: 
        "{{ packages }}"
      state: latest
      update_cache: no
    tags:
      - install-base-packages

  ## docker
  #########################################
  - name: Docker - Installation
    ansible.builtin.apt:
      pkg:
        - docker.io
      state: latest
      update_cache: no
    tags:
      - install-docker

  - name: Docker - Enable docker on systemd
    ansible.builtin.systemd:
      name: docker
      enabled: yes
      state: started
    tags:
      - install-docker

  - name: Docker - Add vagrant to docker group
    user:
      name: vagrant
      groups: docker
      append: yes
    become: yes
    tags:
      - install-docker

  ## oh-my-zsh
  #########################################
  - name: oh-my-zsh - install oh my zsh
    shell: sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    args:
      executable: /bin/bash
      creates: /home/vagrant/.oh-my-zsh/
    become_user: "vagrant"
    changed_when: false
    tags:
      - install-ohmyzsh

  - name: oh-my-zsh - install zsh-autosuggestions plugin
    git:
      repo: https://github.com/zsh-users/zsh-autosuggestions
      dest: "/home/vagrant/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
      force: yes
    become_user: "vagrant"
    tags:
      - install-ohmyzsh

  - name: oh-my-zsh - enable zsh-autosuggestions plugin
    lineinfile:
      path: "/home/vagrant/.zshrc"
      backrefs: yes
      regexp: '^plugins=\((.*)\)'
      line: 'plugins=(\1 zsh-autosuggestions)'
    become_user: "vagrant"
    when: lookup('file', "/home/vagrant/.zshrc") is not search('zsh-autosuggestions')
    tags:
      - install-ohmyzsh

  - name: oh-my-zsh - set zsh as default shell
    user:
      name: "vagrant"
      shell: /bin/zsh
    tags:
      - install-ohmyzsh

  - name: oh-my-zsh - add LC_ALL environment
    ansible.builtin.lineinfile:
      path: '/home/vagrant/.zshrc'
      line: 'export LC_ALL=C.UTF-8'
      state: present
    become_user: vagrant
    tags:
      - install-ohmyzsh

  ## Burp community
  #########################################
  - name: Burp - Download
    ansible.builtin.get_url:
      # other URL: https://portswigger.net/burp/releases/download?product=community&version=2023.5.1&type=linux
      url: "{{ burp_url }}"
      dest: /tmp/burpcommunity.sh
      mode: '0755'
    tags: install-burp

  - name: Burp - Installation
    # this is to deal with burpcommunity prompt installtion
    #   This will install Burp Suite Community Edition on your computer.
    #   OK [o, Enter], Cancel [c]
    #   Where should Burp Suite Community Edition be installed?
    #   [/home/vagrant/BurpSuiteCommunity]
    #   Create symlinks?
    #   Yes [y, Enter], No [n]
    #   Select the folder where you would like Burp Suite Community Edition to create symlinks, then click Next.
    #   [/usr/local/bin]
    #   Extracting files ...
    #   ...
    ansible.builtin.shell:
      cmd: |-
        /tmp/burpcommunity.sh << EOF
        o
        /opt/BurpSuiteCommunity
        y
        /usr/local/bin
        EOF
      creates: /opt/BurpSuiteCommunity
    tags: install-burp

  ## OleVBA
  #########################################
  - name: Olevba - Install requirements
    ansible.builtin.apt:
      name:
        - python3
        - python3-pip
      state: present
      update_cache: no
    tags: install-oletools

  - name: Olevba - Installation
    ansible.builtin.shell: python3 -m pip install --upgrade pip oletools
    tags: install-oletools

  ## pdfid, pdf-parser (DidierStensSuite)
  #########################################
  - name: Pdftools - Install pdf-to-text
    ansible.builtin.apt:
      name:
        - poppler-utils
      state: present
      update_cache: no
    tags: install-pdftools

  - name: Pdftools - Cloning pdf github tools
    ansible.builtin.git:
      repo: 'https://github.com/DidierStevens/DidierStevensSuite.git'
      dest: '/opt/DidierStevensSuite'
      force: yes
    tags: install-pdftools

  - name: Pdftools - Set python alternatives
    ansible.builtin.command:
      cmd: update-alternatives --install /usr/bin/python python /usr/bin/python3 1
      creates: /etc/alternatives/python
    tags: install-pdftools

  - name: Pdftools - Adding execution permission to the pdf tools
    ansible.builtin.file:
      path: "/opt/DidierStevensSuite/{{ item }}"
      mode: '0755'
    loop:
      - pdf-parser.py
      - pdfid.py
    tags: install-pdftools

  - name: Pdftools - Adding pdftools to shell profile
    ansible.builtin.lineinfile:
      path: '/home/vagrant/.zshrc'
      line: 'export PATH=$PATH:/opt/DidierStevensSuite'
      state: present
    become_user: vagrant
    tags: install-pdftools

  ## Tesseract
  #########################################
  - name: Tesseract - Installation
    ansible.builtin.apt:
      name:
        - tesseract-ocr
      state: present
      update_cache: no
    tags: install-tesseract

  - name: Tesseract - install fra package
    ansible.builtin.get_url:
      url: https://github.com/tesseract-ocr/tessdata/raw/4.00/fra.traineddata
      dest: /usr/share/tesseract-ocr/4.00/tessdata/
    tags: install-tesseract

  - name: Tesseract - install eng package
    ansible.builtin.get_url:
      url: https://github.com/tesseract-ocr/tessdata/raw/4.00/eng.traineddata
      dest: /usr/share/tesseract-ocr/4.00/tessdata/
    tags: install-tesseract

  ## Ghidra
  #########################################
  - name: Ghidra - Install requirements
    ansible.builtin.apt:
      name:
        - openjdk-17-jdk
        - wget
        - unzip
      state: present
      update_cache: no
    tags: install-ghidra

  - name: Ghidra - Set the PATH environment for JAVA
    ansible.builtin.lineinfile:
      path: "/home/vagrant/.zshrc"
      line: "export {{ item.key }}={{ item.value }}"
      state: present
    with_items:
      - { key: "PATH", value: "$PATH:/usr/lib/jvm/java-17-openjdk-{{ apt_arch }}/bin/" }
    become_user: vagrant
    tags: install-ghidra

  - name: Ghidra - Download gradle
    ansible.builtin.get_url:
      url: "https://services.gradle.org/distributions/gradle-8.5-bin.zip"
      dest: "/tmp/gradle.zip"
      mode: '0755'
    tags: install-ghidra

  - name: Ghidra - Unzip gradle in /opt
    ansible.builtin.unarchive:
      src: /tmp/gradle.zip
      dest: /opt/
    tags: install-ghidra

  - name: Ghidra - Rename to /opt/gradle
    ansible.builtin.shell:
      cmd: mv /opt/gradle-* /opt/gradle
      creates: /opt/gradle
    tags: install-ghidra

  - name: Ghidra - Set environment variables for gradle
    ansible.builtin.lineinfile:
      path: "/home/vagrant/.zshrc"
      line: "export {{ item.key }}={{ item.value }}"
      state: present
    with_items:
      - { key: "PATH", value: "$PATH:/opt/gradle/bin" }
      - { key: "GRADLE_HOME", value: "/opt/gradle/bin" }
    become_user: vagrant
    tags: install-ghidra

  - name: Ghidra - Download source
    ansible.builtin.get_url:
      #todo(dfelo): use var for version.
      url: https://github.com/NationalSecurityAgency/ghidra/archive/refs/tags/Ghidra_10.4_build.zip
      dest: /tmp/ghidra.zip
    tags: install-ghidra

  - name: Ghidra - Unzip source
    ansible.builtin.unarchive:
      src: /tmp/ghidra.zip
      dest: /tmp/
      creates: /tmp/ghidra
    become_user: vagrant
    tags: install-ghidra

  - name: Ghidra - build ghidra
    shell: |
      cd /tmp/ghidra*/ && \
      /opt/gradle/bin/gradle --init-script gradle/support/fetchDependencies.gradle init && \
      /opt/gradle/bin/gradle buildGhidra
    args:
      executable: /usr/bin/zsh
    become_user: vagrant
    tags: install-ghidra

  - name: Ghidra - copy build
    shell: |
      cd /tmp/ghidra*/ && \
      cp build/dist/*.zip /tmp/ghidra_build.zip
    args:
      executable: /usr/bin/zsh
    become_user: vagrant
    tags: install-ghidra

  - name: Ghidra - Unzip
    ansible.builtin.unarchive:
      src: /tmp/ghidra_build.zip
      dest: /opt/
      creates: /opt/ghidra
    tags: install-ghidra

  - name: Ghidra - Rename Ghidra directory
    ansible.builtin.shell:
      cmd: mv /opt/ghidra_* /opt/ghidra
      creates: /opt/ghidra
    tags: install-ghidra

  - name: Ghidra - Set the PATH environment variable
    ansible.builtin.lineinfile:
      path: '/home/vagrant/.zshrc'
      line: 'export PATH=$PATH:/opt/ghidra'
      state: present
    become_user: vagrant
    tags: install-ghidra

  - name: Ghidra - Create a .desktop shortcut for My Program
    copy:
      dest: /usr/share/applications/ghidra.desktop
      owner: root
      group: root
      mode: '0755'
      content: |
        [Desktop Entry]
        Type=Application
        Name=Ghidra
        Comment=Reverse engineer application
        Icon=/opt/ghidra/docs/GhidraClass/Intermediate/Images/GhidraLogo64.png
        Exec=/opt/ghidra/ghidraRun
        Terminal=false
        Categories=Utility;Application;
    tags: install-ghidra

  ## Brave
  #########################################
  - name: Brave - Import repository key
    ansible.builtin.apt_key:
      url: https://brave-browser-apt-release.s3.brave.com/brave-core.asc
      state: present
    tags: install-brave

  - name: Brave - Add the Brave Browser repository
    ansible.builtin.apt_repository:
      repo: "deb [arch={{ apt_arch }}] https://brave-browser-apt-release.s3.brave.com/ stable main"
      state: present
    tags: install-brave

  - name: Brave - Install Brave Browser
    ansible.builtin.apt:
      name: brave-browser
      state: present
      update_cache: no
    tags: install-brave

  ## Yara
  #########################################
  - name: Yara - Installation
    ansible.builtin.apt:
      name: yara
      state: present
      update_cache: no
    tags: install-yara

  - name: Yara - Check if yara_scan exists in .zshrc
    command: grep -Fq "yara_scan" /home/vagrant/.zshrc
    register: shell_function_check
    ignore_errors: true
    changed_when: false
    tags: install-yara

  - name: Yara - Add yara_scan to .zshrc if it doesn't exist
    blockinfile:
      path: "/home/vagrant/.zshrc"
      block: |
        function yara_scan {
          args=("$@")
          third_to_last=("${args[@]:2}")
          find "$1" -iregex ".*\.\(yar\|yml\|yaml\)$" | xargs -I % yara % "$2" $third_to_last 2> /dev/null
        }
    become_user: vagrant
    when: shell_function_check.rc != 0
    tags: install-yara

  ## ClamAV
  #########################################
  - name: ClamAV - Installation
    ansible.builtin.apt:
      name:
        - clamav
        - clamav-daemon
      state: present
      update_cache: no
    tags: install-clamav

  - name: ClamAV - Disable real time scanning
    ansible.builtin.apt:
      name:
        - clamav
        - clamav-daemon
      state: present
      update_cache: no
    tags: install-clamav

  - name: ClamAV - Ensure clamav-daemon is stopped and disabled
    ansible.builtin.service:
      name: clamav-daemon
      state: stopped
      enabled: false
    tags: install-clamav

  - name: ClamAV - Ensure freshclamav is running and enabled
    ansible.builtin.service:
      name: clamav-freshclam
      state: started
      enabled: true
    tags: install-clamav

  ## VSCode
  #########################################
  - name: VSCode - add apt key
    apt_key:
      url: https://packages.microsoft.com/keys/microsoft.asc
      state: present
    tags: install-vscode

  - name: VSCode - add repo
    apt_repository:
      repo: deb [arch={{ apt_arch }}] http://packages.microsoft.com/repos/vscode stable main
      state: present
    tags: install-vscode

  - name: Update repositories cache and install VSCode
    apt:
      name: code
      state: present
      update_cache: no
    tags: install-vscode

  ## Golang
  #########################################
  - name: Golang - Downloading
    get_url:
      url: "https://dl.google.com/go/go1.20.5.linux-{{ apt_arch }}.tar.gz"
      dest: /tmp/go.tar.gz
      mode: '0755'
    tags: install-golang

  - name: Golang - Unarchiving/Installing
    unarchive:
      src: /tmp/go.tar.gz
      dest: /usr/local
      remote_src: yes
    tags: install-golang

  - name: Golang - Setting up env vars
    lineinfile:
      path: "/home/vagrant/.zshrc"
      line: "export {{ item.key }}={{ item.value }}"
    with_items:
      - { key: "GOROOT", value: "/usr/local/go" }
      - { key: "GOPATH", value: "/home/vagrant/go" }
      - { key: "PATH", value: "$PATH:$GOROOT/bin:$GOPATH/bin" }
    become_user: vagrant
    tags: install-golang

  ## APFS fuse
  #########################################
  - name: APFS fuse - requirements
    ansible.builtin.apt:
      name:
        - fuse
        - libfuse3-dev
        - bzip2
        - libbz2-dev
        - cmake
        - git
        - libattr1-dev
        - zlib1g-dev
      state: present
      update_cache: yes
    tags: install-apfsfuse

  - name: APFS fuse - cloning
    shell: |
      cd /tmp/ && \
      git clone https://github.com/sgan81/apfs-fuse.git && \
      cd apfs-fuse && \
      git submodule init && \
      git submodule update
    args:
      executable: /usr/bin/zsh
    become_user: vagrant
    tags: install-apfsfuse

  - name: APFS fuse - building
    shell: |
      mkdir build && \
      cd build && \
      cmake .. && \
      make
    args:
      executable: /usr/bin/zsh
    become_user: vagrant
    tags: install-apfsfuse

  - name: APFS fuse - copy binary
    ansible.builtin.copy:
      src: /tmp/apfs-fuse/build/apfs-fuse
      dest: /usr/local/bin/apfs-fuse
      owner: root
      group: root
      mode: '0755'
    tags: install-apfsfuse

  - name: APFS fuse - fusermount symlink fix
    ansible.builtin.file:
      src: /bin/fusermount
      dest: /bin/fusermount3
      owner: root
      group: root
      state: link
